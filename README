   <h1 align="center"><b>WEATHER APP</b></h3>

<p>It is a mobile application that provides information about a weather of the city you want.</p>

&nbsp;

## How it works:

![weather-app-diagram](https://user-images.githubusercontent.com/77735480/183253699-705b9c38-8a1b-4231-a46c-ab996e499c5e.png)

At a high level, 'Weather App' consists of a frontend that runs directly on a mobile device and a backend that provides with weather report. 

   - Frontend is a 'React Native' based app, there user can 'sign up', 'login' or 'skip login' to access the functionality of the app. To authenticate the user frontend connects to the 'Firebase Auth' service. After that user can enter the city name, which will be sent to the backend to get the weather report. In our case 'Frontend app' will run on the Android studio emulator.  

   - Backend app is written in 'Node JS'. When the 'city name' is received it sends request to the 'Google API' to get a geocode of the location. Furthermore, backend sends the received geocode to the 'OpenWeather API' and gets a weather report of that location from it. Backend app will run as a deployment in the Kubernetes cluster. 'Backend app' will have it's domain address to which the 'Frontend app' will send request to.

Moreover, backend returns the weather report to the frontend. Frontend then shows the information on the screen of the device. Additionally, Frontend app connects to the 'Firestore Cloud Database' to store the request details for further analytics.

   - 'Firestore Cloud Database' is a NoSQL document database to easily store, sync, and query data for mobile and web apps - at global scale.

   - 'Firebase Auth' provides methods to create and manage users that use their email addresses and passwords to sign in.

More details on general architecture in each of the `backend` and `frontend` folders.

## üì¶ Backend Installation instructions

## How to run:

  1. Install **Node** latest version [*Run node -v if version shown so node properly installed*]
  
  2. Install all npm dependencies using below command:
     ```
     npm install
     ```
     
  3. Run node server using below command:
     ```
     npm start
     ```
     
  4. Here you go server is up at *http://localhost:3000/*
  
## ‚öôÔ∏è How to test:

     *http://localhost:3000/weather?location={CITY_NAME}*
     
   ### For instance:
     
     *http://localhost:3000/weather?location=bishkek*


## üì¶ Frontend Installation instructions

## How to run:

  1. Install **Node** latest version [*Run node -v if version shown so node properly installed*]
  
  2. Install all npm dependencies using below command:
     ```
     npm install
     ```
     
  3. Run the app on an android device using below command:
     ```
     npx react-native run-android
     ```
     The app was tested on android devices, but with an additional configuration it is possible to run it on ios emulator.

## Deploying in Kubernetes
When building a backend Docker image you should specify a **GOOGLE_API_KEY** and **WEATHER_FORECAST_KEY** as environment variables.

**GOOGLE_API_KEY** will contain key for the Google API that is used for geocoding.
**WEATHER_FORECAST_KEY** will contain key for the 'OpenWeather API'.

For the frontend app you don't need to create pipeline for it and you don't need to deploy it in kubernetes. Frontend app should be tested on Android Studio.


## Learn More
1. This app is written using React Native for Android & iOS, Check the getting started guide here: https://reactnative.dev/docs/environment-setup .
